# Generated by Django 3.1.4 on 2021-06-18 06:34

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PointList',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('content', models.CharField(default='', max_length=50)),
                ('add_or_sub', models.BooleanField(default=True)),
                ('point', models.PositiveIntegerField(default=0)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('product_type', models.CharField(blank=True, default='제품 종류', max_length=10)),
                ('product_source', models.URLField()),
                ('product_name', models.CharField(blank=True, default='제품 이름', max_length=10)),
                ('product_price', models.PositiveIntegerField()),
                ('product_image', models.URLField()),
                ('product_stock', models.PositiveIntegerField()),
                ('product_option', models.JSONField(default=dict)),
                ('product_option_price', models.PositiveIntegerField()),
                ('product_shipping_price', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['id', 'product_type', 'product_price'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_email', models.EmailField(max_length=254)),
                ('nickname', models.CharField(blank=True, max_length=30, unique=True)),
                ('name', models.TextField(default='나누다')),
                ('job', models.CharField(blank=True, default='', max_length=30)),
                ('gender', models.IntegerField(blank=True, choices=[('1', '남성'), ('0', '여성')], default='')),
                ('birthdate', models.CharField(blank=True, default='', max_length=30)),
                ('joinday', models.DateTimeField(auto_now_add=True)),
                ('limit', models.IntegerField(blank=True, default=0)),
                ('age', models.PositiveIntegerField(blank=True, default=0)),
                ('profile', models.TextField(blank=True, default='')),
                ('phone_number', models.CharField(blank=True, default='01090373600', max_length=30)),
                ('phone_company', models.CharField(blank=True, default='SKT', max_length=30)),
                ('nationalinfo', models.CharField(blank=True, default='0', max_length=30)),
                ('address_exist', models.BooleanField(blank=True, default=False)),
                ('address_number', models.TextField(blank=True, default='우편번호')),
                ('address', models.TextField(blank=True, default='주소')),
                ('address_detail', models.TextField(blank=True, default='상세주소')),
                ('address_claim', models.CharField(default='문 앞', max_length=30)),
                ('address_name', models.CharField(default='나누다씨', max_length=30)),
                ('address_phone', models.CharField(default='01090373600', max_length=30)),
                ('point_entire', models.PositiveIntegerField(default=0)),
                ('platform', models.CharField(default='0', max_length=30)),
                ('uid', models.CharField(default='', max_length=300)),
                ('bank_exist', models.BooleanField(blank=True, default=False)),
                ('bank', models.CharField(blank=True, default='은행', max_length=30)),
                ('account', models.CharField(blank=True, default='계좌', max_length=30)),
                ('point', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nanuda.pointlist')),
            ],
            options={
                'ordering': ['id', 'joinday'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('service_date', models.DateTimeField(auto_now_add=True)),
                ('service_score', models.FloatField(blank=True, default=5.0)),
                ('service_content', models.CharField(blank=True, max_length=300, null=True)),
                ('service_opinion', models.CharField(blank=True, max_length=300, null=True)),
                ('user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='nanuda.user')),
            ],
            options={
                'ordering': ['id', 'service_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('review_score', models.FloatField(blank=True, default=5.0)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('review_like', models.TextField(blank=True, default='내용')),
                ('review_dislike', models.TextField(blank=True, default='내용')),
                ('review_image', models.JSONField(blank=True, default=list)),
                ('review_alert', models.IntegerField(default=0)),
                ('review_likeNum', models.IntegerField(default=0)),
                ('review_dislikeNum', models.IntegerField(default=0)),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nanuda.product')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nanuda.user')),
            ],
            options={
                'ordering': ['id', 'review_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_id', models.CharField(default='01210413135901010000', max_length=30)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('order_price', models.PositiveIntegerField()),
                ('order_amount', models.PositiveIntegerField()),
                ('order_method', models.CharField(default='배달', max_length=10)),
                ('order_expected_date', models.JSONField(default=dict)),
                ('order_receiver', models.CharField(default='수령인', max_length=30)),
                ('order_address_number', models.TextField(default='우편번호')),
                ('order_address', models.TextField(default='주소')),
                ('order_address_detail', models.TextField(default='상세주소')),
                ('order_phone_number', models.CharField(default='', max_length=30)),
                ('order_request', models.TextField(default='주문 요청사항')),
                ('wish_haul', models.CharField(blank=True, default='', max_length=30)),
                ('wish_url', models.CharField(blank=True, default='http://', max_length=30)),
                ('wish_title', models.CharField(blank=True, default='', max_length=30)),
                ('wish_des', models.CharField(blank=True, default='', max_length=30)),
                ('wish_image', models.CharField(blank=True, default='', max_length=30)),
                ('review_write', models.BooleanField(default=False)),
                ('product_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nanuda.product')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nanuda.user')),
            ],
            options={
                'ordering': ['id', 'order_date'],
                'managed': True,
            },
        ),
    ]
